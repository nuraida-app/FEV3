

-- Generated by the database client.
-- Generated by the database client.
CREATE TABLE a_branch(
    id SERIAL NOT NULL,
    name text,
    categoryid integer,
    createdat timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT a_branch_categoryid_fkey FOREIGN key(categoryid) REFERENCES a_category(id)
);


-- Generated by the database client.
CREATE TABLE a_category(
    id SERIAL NOT NULL,
    name text,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    homebase integer,
    PRIMARY KEY(id),
    CONSTRAINT a_category_homebase_fkey FOREIGN key(homebase) REFERENCES a_homebase(id)
);

-- Generated by the database client.
CREATE TABLE a_class(
    id SERIAL NOT NULL,
    homebase integer,
    grade integer,
    major integer,
    name text NOT NULL,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT a_class_grade_fkey FOREIGN key(grade) REFERENCES a_grade(id)
);


-- Generated by the database client.
CREATE TABLE a_grade(
    id SERIAL NOT NULL,
    homebase integer,
    name text NOT NULL,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT a_grade_homebase_fkey FOREIGN key(homebase) REFERENCES a_homebase(id)
);


-- Generated by the database client.
CREATE TABLE a_homebase(
    id SERIAL NOT NULL,
    name text NOT NULL,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id)
);


-- Generated by the database client.
CREATE TABLE a_periode(
    id SERIAL NOT NULL,
    homebase integer,
    name text NOT NULL,
    isactive boolean DEFAULT false,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT a_periode_homebase_fkey FOREIGN key(homebase) REFERENCES a_homebase(id)
);

-- Generated by the database client.
CREATE TABLE a_subject(
    id SERIAL NOT NULL,
    homebase integer,
    name text NOT NULL,
    cover text,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    categoryid integer,
    branchid integer,
    PRIMARY KEY(id),
    CONSTRAINT a_subject_categoryid_fkey FOREIGN key(categoryid) REFERENCES a_category(id),
    CONSTRAINT a_subject_branchid_fkey FOREIGN key(branchid) REFERENCES a_branch(id)
);

-- Generated by the database client.
CREATE TABLE at_subject(
    id SERIAL NOT NULL,
    teacher integer NOT NULL,
    subject integer NOT NULL,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT at_subject_subject_fkey FOREIGN key(subject) REFERENCES a_subject(id),
    CONSTRAINT at_subject_teacher_fkey FOREIGN key(teacher) REFERENCES u_teachers(id)
);


-- Generated by the database client.
CREATE TABLE cl_students(
    id SERIAL NOT NULL,
    homebase integer,
    periode integer,
    classid integer,
    student integer,
    student_name varchar(255) NOT NULL,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT cl_students_classid_fkey FOREIGN key(classid) REFERENCES a_class(id),
    CONSTRAINT cl_students_homebase_fkey FOREIGN key(homebase) REFERENCES a_homebase(id),
    CONSTRAINT cl_students_periode_fkey FOREIGN key(periode) REFERENCES a_periode(id),
    CONSTRAINT cl_students_student_fkey FOREIGN key(student) REFERENCES u_students(id)
);

-- Generated by the database client.
CREATE TABLE l_attendance(
    id SERIAL NOT NULL,
    periode integer,
    classid integer,
    subjectid integer,
    studentid integer,
    note text,
    day_date date,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT l_attendance_classid_fkey FOREIGN key(classid) REFERENCES a_class(id),
    CONSTRAINT l_attendance_periode_fkey FOREIGN key(periode) REFERENCES a_periode(id),
    CONSTRAINT l_attendance_studentid_fkey FOREIGN key(studentid) REFERENCES u_students(id),
    CONSTRAINT l_attendance_subjectid_fkey FOREIGN key(subjectid) REFERENCES a_subject(id)
);

-- Generated by the database client.
CREATE TABLE l_attitude(
    id SERIAL NOT NULL,
    student_id integer,
    subject_id integer,
    class_id integer,
    periode_id integer,
    chapter_id integer,
    teacher_id integer,
    semester integer,
    month varchar(20),
    kinerja integer,
    kedisiplinan integer,
    keaktifan integer,
    percaya_diri integer,
    catatan_guru text,
    rata_rata numeric(5,2),
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updatedat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT l_attitude_chapter_id_fkey FOREIGN key(chapter_id) REFERENCES l_chapter(id),
    CONSTRAINT l_attitude_class_id_fkey FOREIGN key(class_id) REFERENCES a_class(id),
    CONSTRAINT l_attitude_periode_id_fkey FOREIGN key(periode_id) REFERENCES a_periode(id),
    CONSTRAINT l_attitude_student_id_fkey FOREIGN key(student_id) REFERENCES u_students(id),
    CONSTRAINT l_attitude_subject_id_fkey FOREIGN key(subject_id) REFERENCES a_subject(id),
    CONSTRAINT l_attitude_teacher_id_fkey FOREIGN key(teacher_id) REFERENCES u_teachers(id),
    CONSTRAINT l_attitude_keaktifan_check CHECK (((keaktifan >= 0) AND (keaktifan <= 100))),
    CONSTRAINT l_attitude_kedisiplinan_check CHECK (((kedisiplinan >= 0) AND (kedisiplinan <= 100))),
    CONSTRAINT l_attitude_kinerja_check CHECK (((kinerja >= 0) AND (kinerja <= 100))),
    CONSTRAINT l_attitude_month_check CHECK (((month)::text = ANY (ARRAY[('Januari'::character varying)::text, ('Februari'::character varying)::text, ('Maret'::character varying)::text, ('April'::character varying)::text, ('Mei'::character varying)::text, ('Juni'::character varying)::text, ('Juli'::character varying)::text, ('Agustus'::character varying)::text, ('September'::character varying)::text, ('Oktober'::character varying)::text, ('November'::character varying)::text, ('Desember'::character varying)::text]))),
    CONSTRAINT l_attitude_percaya_diri_check CHECK (((percaya_diri >= 0) AND (percaya_diri <= 100))),
    CONSTRAINT l_attitude_semester_check CHECK (((semester >= 1) AND (semester <= 2)))
);
CREATE INDEX idx_attitude_class_chapter ON public.l_attitude USING btree (class_id, chapter_id);
CREATE INDEX idx_attitude_month ON public.l_attitude USING btree (month);
CREATE INDEX idx_attitude_student_subject ON public.l_attitude USING btree (student_id, subject_id);
CREATE UNIQUE INDEX idx_attitude_unique ON public.l_attitude USING btree (student_id, subject_id, class_id, chapter_id, month, semester);

-- Generated by the database client.
CREATE TABLE l_cclass(
    id SERIAL NOT NULL,
    chapter integer,
    classid integer,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT l_cclass_classid_fkey FOREIGN key(classid) REFERENCES a_class(id)
);

-- Generated by the database client.
CREATE TABLE l_chapter(
    id SERIAL NOT NULL,
    subject integer,
    teacher integer,
    title text NOT NULL,
    target text NOT NULL,
    order_number integer,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT l_chapter_subject_fkey FOREIGN key(subject) REFERENCES a_subject(id),
    CONSTRAINT l_chapter_teacher_fkey FOREIGN key(teacher) REFERENCES u_teachers(id)
);

-- Generated by the database client.
CREATE TABLE l_formative(
    id SERIAL NOT NULL,
    student_id integer,
    subject_id integer,
    class_id integer,
    periode_id integer,
    chapter_id integer,
    teacher_id integer,
    semester integer,
    month varchar(20),
    f_1 integer,
    f_2 integer,
    f_3 integer,
    f_4 integer,
    f_5 integer,
    f_6 integer,
    f_7 integer,
    f_8 integer,
    rata_rata numeric(5,2),
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updatedat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT l_formative_chapter_id_fkey FOREIGN key(chapter_id) REFERENCES l_chapter(id),
    CONSTRAINT l_formative_class_id_fkey FOREIGN key(class_id) REFERENCES a_class(id),
    CONSTRAINT l_formative_periode_id_fkey FOREIGN key(periode_id) REFERENCES a_periode(id),
    CONSTRAINT l_formative_student_id_fkey FOREIGN key(student_id) REFERENCES u_students(id),
    CONSTRAINT l_formative_subject_id_fkey FOREIGN key(subject_id) REFERENCES a_subject(id),
    CONSTRAINT l_formative_teacher_id_fkey FOREIGN key(teacher_id) REFERENCES u_teachers(id),
    CONSTRAINT l_formative_f_1_check CHECK (((f_1 >= 0) AND (f_1 <= 100))),
    CONSTRAINT l_formative_f_2_check CHECK (((f_2 >= 0) AND (f_2 <= 100))),
    CONSTRAINT l_formative_f_3_check CHECK (((f_3 >= 0) AND (f_3 <= 100))),
    CONSTRAINT l_formative_f_4_check CHECK (((f_4 >= 0) AND (f_4 <= 100))),
    CONSTRAINT l_formative_f_5_check CHECK (((f_5 >= 0) AND (f_5 <= 100))),
    CONSTRAINT l_formative_f_6_check CHECK (((f_6 >= 0) AND (f_6 <= 100))),
    CONSTRAINT l_formative_f_7_check CHECK (((f_7 >= 0) AND (f_7 <= 100))),
    CONSTRAINT l_formative_f_8_check CHECK (((f_8 >= 0) AND (f_8 <= 100))),
    CONSTRAINT l_formative_month_check CHECK (((month)::text = ANY (ARRAY[('Januari'::character varying)::text, ('Februari'::character varying)::text, ('Maret'::character varying)::text, ('April'::character varying)::text, ('Mei'::character varying)::text, ('Juni'::character varying)::text, ('Juli'::character varying)::text, ('Agustus'::character varying)::text, ('September'::character varying)::text, ('Oktober'::character varying)::text, ('November'::character varying)::text, ('Desember'::character varying)::text]))),
    CONSTRAINT l_formative_semester_check CHECK (((semester >= 1) AND (semester <= 2)))
);
CREATE INDEX idx_formative_class_chapter ON public.l_formative USING btree (class_id, chapter_id);
CREATE INDEX idx_formative_month ON public.l_formative USING btree (month);
CREATE INDEX idx_formative_student_subject ON public.l_formative USING btree (student_id, subject_id);
CREATE UNIQUE INDEX idx_formative_unique ON public.l_formative USING btree (student_id, subject_id, class_id, chapter_id, month, semester);

-- Generated by the database client.
CREATE TABLE l_summative(
    id SERIAL NOT NULL,
    student_id integer,
    subject_id integer,
    class_id integer,
    periode_id integer,
    chapter_id integer,
    teacher_id integer,
    semester integer,
    month varchar(20),
    oral integer,
    written integer,
    project integer,
    performance integer,
    rata_rata numeric(5,2),
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updatedat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT l_summative_chapter_id_fkey FOREIGN key(chapter_id) REFERENCES l_chapter(id),
    CONSTRAINT l_summative_class_id_fkey FOREIGN key(class_id) REFERENCES a_class(id),
    CONSTRAINT l_summative_periode_id_fkey FOREIGN key(periode_id) REFERENCES a_periode(id),
    CONSTRAINT l_summative_student_id_fkey FOREIGN key(student_id) REFERENCES u_students(id),
    CONSTRAINT l_summative_subject_id_fkey FOREIGN key(subject_id) REFERENCES a_subject(id),
    CONSTRAINT l_summative_teacher_id_fkey FOREIGN key(teacher_id) REFERENCES u_teachers(id),
    CONSTRAINT l_summative_month_check CHECK (((month)::text = ANY (ARRAY[('Januari'::character varying)::text, ('Februari'::character varying)::text, ('Maret'::character varying)::text, ('April'::character varying)::text, ('Mei'::character varying)::text, ('Juni'::character varying)::text, ('Juli'::character varying)::text, ('Agustus'::character varying)::text, ('September'::character varying)::text, ('Oktober'::character varying)::text, ('November'::character varying)::text, ('Desember'::character varying)::text]))),
    CONSTRAINT l_summative_oral_check CHECK (((oral >= 0) AND (oral <= 100))),
    CONSTRAINT l_summative_project_check CHECK (((project >= 0) AND (project <= 100))),
    CONSTRAINT l_summative_semester_check CHECK (((semester >= 1) AND (semester <= 2))),
    CONSTRAINT l_summative_written_check CHECK (((written >= 0) AND (written <= 100))),
    CONSTRAINT l_summative_performance_check CHECK (((performance >= 0) AND (performance <= 100)))
);
CREATE INDEX idx_summative_class_chapter ON public.l_summative USING btree (class_id, chapter_id);
CREATE INDEX idx_summative_month ON public.l_summative USING btree (month);
CREATE INDEX idx_summative_student_subject ON public.l_summative USING btree (student_id, subject_id);
CREATE UNIQUE INDEX idx_summative_unique ON public.l_summative USING btree (student_id, subject_id, class_id, chapter_id, month, semester);

-- Generated by the database client.
CREATE TABLE l_weighting(
    id SERIAL NOT NULL,
    teacherid integer NOT NULL,
    subjectid integer NOT NULL,
    presensi smallint NOT NULL,
    attitude smallint NOT NULL,
    daily smallint NOT NULL,
    PRIMARY KEY(id),
    CONSTRAINT fk_teacher FOREIGN key(teacherid) REFERENCES u_teachers(id),
    CONSTRAINT fk_subject FOREIGN key(subjectid) REFERENCES a_subject(id),
    CONSTRAINT l_weighting_presensi_check CHECK (((presensi >= 0) AND (presensi <= 100))),
    CONSTRAINT l_weighting_attitude_check CHECK (((attitude >= 0) AND (attitude <= 100))),
    CONSTRAINT l_weighting_daily_check CHECK (((daily >= 0) AND (daily <= 100)))
);
CREATE UNIQUE INDEX unique_teacher_subject ON public.l_weighting USING btree (teacherid, subjectid);
CREATE INDEX idx_l_weighting_teacherid ON public.l_weighting USING btree (teacherid);
CREATE INDEX idx_l_weighting_subjectid ON public.l_weighting USING btree (subjectid);


-- Generated by the database client.
CREATE TABLE u_parents(
    id SERIAL NOT NULL,
    studentid integer,
    email text NOT NULL,
    name text NOT NULL,
    password text NOT NULL,
    level text DEFAULT 'parent'::text,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT u_parents_studentid_fkey FOREIGN key(studentid) REFERENCES u_students(id)
);
CREATE UNIQUE INDEX u_parents_email_key ON public.u_parents USING btree (email);

-- Generated by the database client.
CREATE TABLE u_students(
    id SERIAL NOT NULL,
    homebase integer,
    entry integer,
    name text NOT NULL,
    nis text,
    password text,
    level text DEFAULT 'student'::text,
    gender varchar(255),
    isactive boolean DEFAULT true,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    periode integer,
    PRIMARY KEY(id),
    CONSTRAINT u_students_homebase_fkey FOREIGN key(homebase) REFERENCES a_homebase(id),
    CONSTRAINT u_students_periode_fkey FOREIGN key(periode) REFERENCES a_periode(id)
);

-- Generated by the database client.
CREATE TABLE u_teachers(
    id SERIAL NOT NULL,
    username text NOT NULL,
    name text NOT NULL,
    email text,
    img text,
    homebase integer NOT NULL,
    homeroom boolean DEFAULT false,
    class integer,
    phone text,
    password text NOT NULL,
    gender varchar(10) NOT NULL,
    level text DEFAULT 'teacher'::text,
    createdat timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY(id),
    CONSTRAINT u_teachers_class_fkey FOREIGN key(class) REFERENCES a_class(id),
    CONSTRAINT u_teachers_homebase_fkey FOREIGN key(homebase) REFERENCES a_homebase(id)
);